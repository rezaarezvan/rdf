from __future__ import annotations

import textwrap

from typing import Mapping
from .themes import ColorTheme

_PALETTE_TMPL = textwrap.dedent(
    """
    /* === RDF autogenerated palette === */
    :root {{
        --axis-color: #000;
        --grid-stroke: rgba(0,0,0,0.2);
        --plot3d-stroke: rgba(0,0,0,0.3);
        --plot3d-grid: rgba(0,0,0,0.2);
    }}
    @media (prefers-color-scheme: dark) {{
        :root {{
            --axis-color: #fff;
            --grid-stroke: rgba(255,255,255,0.2);
            --plot3d-stroke: rgba(255,255,255,0.3);
            --plot3d-grid: rgba(255,255,255,0.2);
        }}
    }}

    /* Light‑mode palette */
    {light}

    /* Dark overrides */
    @media (prefers-color-scheme: dark) {{
        {dark}
    }}
    """
).strip()


_AXIS_AND_MISC = textwrap.dedent(
    """
    /* Axis, ticks, legend */
    text, .text { fill: var(--axis-color) !important; stroke: none !important; }
    .axis line, .axis path,
    .tick line, .tick path,
    path.domain,
    line.grid { stroke: var(--axis-color) !important; }
    .legend text { fill: var(--axis-color) !important; }

    /* Patch paths that relied on currentColor */
    .patch path[style*="stroke: currentColor"] { stroke: var(--axis-color) !important; }

    /* Legend background (first child of legend group) */
    g.legend > g:first-child > path:first-child {
        fill: rgba(255,255,255,0.8) !important;
        stroke: rgba(0,0,0,0.1) !important;
    }
    @media (prefers-color-scheme: dark) {
        g.legend > g:first-child > path:first-child {
            fill: rgba(26,26,26,0.8) !important;
            stroke: rgba(255,255,255,0.1) !important;
        }
    }

    /* 3‑D specific rules */
    .plot3d path, .plot3d polygon {
        stroke: var(--plot3d-stroke) !important;
    }
    .plot3d-grid line { stroke: var(--plot3d-grid) !important; }
    .plot3d-surface path[style*="fill:"] {
        fill-opacity: 0.9 !important;
    }
    @media (prefers-color-scheme: dark) {
        .plot3d-surface path[style*="fill:"] {
            fill-opacity: 0.95 !important;
            filter: saturate(1.2) !important;
        }
    }
    """
).strip()


def _cls_lines(pal: Mapping[str, str]) -> str:
    return "".join(f".{k} {{ fill:{v}; stroke:{v}; }}" for k, v in sorted(pal.items()))


def build_style(theme: ColorTheme) -> str:
    light = _cls_lines(theme.light | theme.base)
    dark = _cls_lines(theme.dark | theme.base)
    return _PALETTE_TMPL.format(light=light, dark=dark) + "" + _AXIS_AND_MISC + ""
